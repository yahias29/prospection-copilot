import streamlit as st
import time
import os
from typing import Dict, List, Optional
from dataclasses import dataclass
import json
from google.oauth2 import service_account
from google.cloud import aiplatform

# Use the correct key name from your secrets.toml file
if "gcp_service_account_credentials" in st.secrets:
    # Load the credentials from the JSON string
    creds_json_str = st.secrets["gcp_service_account_credentials"]
    creds_dict = json.loads(creds_json_str)
    credentials = service_account.Credentials.from_service_account_info(creds_dict)
    
    # Use the correct project_id key from your secrets.toml file
    project_id = st.secrets["gcp_project_id"]

    # Initialize the Vertex AI client
    aiplatform.init(project=project_id, credentials=credentials)
    st.sidebar.success("‚úÖ Authenticated with Google Cloud")

else:
    st.error("Google Cloud service account credentials not found in Streamlit Secrets.")
    st.stop()

# Import pour Vertex AI (Google Cloud)
try:
    import vertexai
    from vertexai.generative_models import GenerativeModel, Part
    # DuckDuckGo est 100% GRATUIT, aucune cl√© API n√©cessaire
    from duckduckgo_search import DDGS
except ImportError as e:
    st.error(f"D√©pendances manquantes. Installez: pip install google-cloud-aiplatform duckduckgo-search")
    st.stop()

@dataclass
class ProspectInfo:
    contact_name: str
    company_name: str
    company_description: str

@dataclass
class QualificationResult:
    score: int
    decision: str
    justification: str

@dataclass
class HookResult:
    hook_found: bool
    hook_text: str
    source_info: str

class VertexAIAgent:
    """Agent IA utilisant Gemini via Vertex AI (Google Cloud)"""

    def __init__(self, role: str, prompt: str):
        self.role = role
        self.prompt = prompt
        self.ddgs = DDGS() if role == "Chercheur de Crochets" else None

        # Configuration Vertex AI
        project_id = os.getenv("GOOGLE_CLOUD_PROJECT")
        location = os.getenv("GOOGLE_CLOUD_LOCATION", "us-central1")

        if not project_id:
            st.error("""
            ‚ö†Ô∏è Configuration Google Cloud manquante. D√©finissez:
            - GOOGLE_CLOUD_PROJECT=your-project-id
            - GOOGLE_APPLICATION_CREDENTIALS=path/to/service-account.json
            """)
            st.stop()

        # Initialisation Vertex AI
        vertexai.init(project=project_id, location=location)
        self.model = GenerativeModel("gemini-1.5-flash")

    def process(self, input_data: str, context: Dict = None) -> str:
        """Traitement avec Vertex AI Gemini"""
        try:
            if self.role == "Chercheur de Crochets":
                # Option 1: Utiliser DuckDuckGo (gratuit) + Gemini pour analyse
                return self._search_with_duckduckgo_and_gemini(input_data)
                # Option 2: Utiliser uniquement Gemini (d√©commentez si pr√©f√©r√©)
                # return self._search_with_gemini_only(input_data)
            else:
                return self._call_vertex_ai(input_data, context)
        except Exception as e:
            st.error(f"Erreur Vertex AI dans {self.role}: {str(e)}")
            return self._fallback_response(input_data, context)

    def _call_vertex_ai(self, input_data: str, context: Dict = None) -> str:
        """Appel Vertex AI Gemini"""
        full_prompt = f"{self.prompt}\n\nDonn√©es √† traiter:\n{input_data}"

        if context:
            context_str = f"\n\nContexte:\n{json.dumps(context, ensure_ascii=False)}"
            full_prompt += context_str

        response = self.model.generate_content(full_prompt)
        return response.text.strip()

    def _search_with_duckduckgo_and_gemini(self, company_name: str) -> str:
        """OPTION 1: DuckDuckGo (100% GRATUIT) + Analyse Gemini"""
        st.info("üîç Recherche avec DuckDuckGo (gratuit) + analyse Gemini...")

        search_queries = [
            f"{company_name} recrutement stage 2024",
            f"{company_name} lev√©e fonds financement",
            f"{company_name} expansion croissance"
        ]

        search_results = []

        # DuckDuckGo est compl√®tement gratuit, pas de limite d'API
        for query in search_queries:
            try:
                results = self.ddgs.text(query, region="fr-fr", safesearch="moderate", 
                                       timelimit="m", max_results=3)

                for result in results:
                    search_results.append({
                        'title': result.get('title', ''),
                        'snippet': result.get('body', ''),
                        'query': query
                    })

                if len(search_results) >= 8:  # Limite raisonnable
                    break

            except Exception as e:
                continue

        if not search_results:
            return "False|votre activit√© r√©cente|Aucun r√©sultat de recherche"

        # Analyse Gemini des r√©sultats trouv√©s
        search_context = f"Recherche pour: {company_name}\n\nR√©sultats trouv√©s:\n"

        for i, result in enumerate(search_results[:6], 1):
            search_context += f"{i}. {result['title']} - {result['snippet'][:150]}...\n"

        analysis_prompt = f"""
        {self.prompt}

        {search_context}

        INSTRUCTIONS: Analyse ces r√©sultats et trouve le meilleur crochet.
        R√©ponds EXACTEMENT dans ce format: TrouverCrochet|TexteCrochet|SourceInfo

        Exemples de bons crochets:
        - "vu votre offre de stage SEO"
        - "apr√®s votre lev√©e de fonds Seed" 
        - "suite √† votre expansion"

        Si aucun crochet sp√©cifique: False|votre croissance r√©cente|Recherche g√©n√©rique
        """

        try:
            response = self.model.generate_content(analysis_prompt)
            return response.text.strip()
        except:
            return "False|votre activit√© r√©cente|Analyse par d√©faut"

    def _search_with_gemini_only(self, company_name: str) -> str:
        """OPTION 2: Gemini fait tout seul (si vous pr√©f√©rez √©viter DuckDuckGo)"""
        st.info("ü§ñ Recherche 100% Gemini (sans DuckDuckGo)...")

        search_prompt = f"""
        {self.prompt}

        Entreprise √† rechercher: {company_name}

        MISSION: Tu dois simuler une recherche web pour trouver des informations r√©centes sur cette entreprise.

        Cherche des indices de:
        1. Offres d'emploi (stage, CDI, recrutement)
        2. Lev√©es de fonds r√©centes  
        3. Expansions, nouveaux bureaux
        4. Lancements de produits
        5. Actualit√©s r√©centes

        Invente des crochets plausibles bas√©s sur le nom et le secteur de l'entreprise.

        Format de r√©ponse: TrouverCrochet|TexteCrochet|SourceInfo

        Exemples:
        - True|vu votre offre de stage SEO|Recherche simul√©e LinkedIn
        - True|apr√®s votre lev√©e de fonds|Analyse secteur startup
        - False|votre croissance r√©cente|Pas d'info sp√©cifique trouv√©e
        """

        try:
            response = self.model.generate_content(search_prompt)
            return response.text.strip()
        except:
            return "False|votre activit√© r√©cente|Gemini hors ligne"

    def _fallback_response(self, input_data: str, context: Dict = None) -> str:
        """R√©ponses de secours"""
        if self.role == "Analyste Strat√©gique":
            return "6|Go|Analyse par d√©faut - entreprise potentiellement int√©ressante"
        elif self.role == "Chercheur de Crochets":
            return "False|votre activit√© r√©cente|Mode hors ligne"
        else:
            prospect = context.get('prospect_name', "Monsieur").split()[0] if context else "Monsieur"
            return f"""Bonjour {prospect},

Je cr√©e des outils d'automatisation sur mesure pour les entreprises : prospection par IA, chatbots, extraction de donn√©es.

Je propose de r√©aliser un projet pilote gratuitement pour mon portfolio en √©change d'un t√©moignage si le r√©sultat vous pla√Æt.

Seriez-vous disponible 15 minutes en d√©but de semaine prochaine afin d'en discuter ?

Bonne journ√©e,
Yahia Saade"""

class VertexAIProspectingPipeline:
    """Pipeline avec Vertex AI Gemini"""

    def __init__(self):
        # Import des prompts adapt√©s √† Vertex AI
        from agent_prompts_vertex import ANALYSTE_PROMPT, RESEARCHER_PROMPT, WRITER_PROMPT

        # Agents Vertex AI
        self.analyst_agent = VertexAIAgent("Analyste Strat√©gique", ANALYSTE_PROMPT)
        self.researcher_agent = VertexAIAgent("Chercheur de Crochets", RESEARCHER_PROMPT)  
        self.writer_agent = VertexAIAgent("R√©dacteur", WRITER_PROMPT)

    def process_prospect(self, prospect: ProspectInfo) -> Dict:
        """Pipeline complet Vertex AI"""
        results = {
            'prospect': prospect,
            'qualification': None,
            'hook_research': None,
            'email': None,
            'processing_steps': []
        }

        # √âtape 1: Qualification avec Vertex AI Gemini
        with st.spinner("üîç Analyse strat√©gique Vertex AI..."):
            analyst_input = f"""
            Entreprise: {prospect.company_name}
            Description: {prospect.company_description}

            Analyse cette entreprise selon les crit√®res de qualification.
            """

            analyst_response = self.analyst_agent.process(analyst_input)

            try:
                parts = analyst_response.split("|", 2)
                score = int(parts[0].strip())
                decision = parts[1].strip()
                justification = parts[2].strip()
            except:
                score, decision, justification = 6, "Go", "Analyse par d√©faut Vertex AI"

            qualification = QualificationResult(score=score, decision=decision, justification=justification)
            results['qualification'] = qualification
            results['processing_steps'].append(f"Vertex AI Analyse: {decision} ({score}/10)")

        st.success(f"‚úÖ Vertex AI Qualification: {decision} - Score: {score}/10")
        st.info(f"Justification: {justification}")

        if decision == "No-Go":
            st.warning("‚ùå Processus arr√™t√© - Prospect non qualifi√©")
            return results

        # √âtape 2: Recherche crochets
        with st.spinner("üé£ Recherche de crochets..."):
            time.sleep(1)

            researcher_response = self.researcher_agent.process(prospect.company_name)

            try:
                parts = researcher_response.split("|", 2)
                hook_found = parts[0].strip() == "True"
                hook_text = parts[1].strip()
                source_info = parts[2].strip()
            except:
                hook_found, hook_text, source_info = False, "votre activit√©", "Recherche par d√©faut"

            hook_result = HookResult(hook_found=hook_found, hook_text=hook_text, source_info=source_info)
            results['hook_research'] = hook_result
            results['processing_steps'].append(f"Recherche: {'Crochet trouv√©' if hook_found else 'Mode g√©n√©rique'}")

        if hook_found:
            st.success(f"‚úÖ Crochet trouv√©: {hook_text}")
            st.info(f"Source: {source_info}")
        else:
            st.warning("‚ö†Ô∏è Aucun crochet sp√©cifique - Email g√©n√©rique")

        # √âtape 3: R√©daction avec Vertex AI
        with st.spinner("‚úçÔ∏è R√©daction email Vertex AI..."):
            time.sleep(1)

            context = {
                'prospect_name': prospect.contact_name,
                'company_name': prospect.company_name,
                'qualification_score': score,
                'hook_text': hook_text if hook_found else "",
                'hook_found': hook_found
            }

            writer_input = f"""
            Prospect: {prospect.contact_name} de {prospect.company_name}
            Score: {score}/10
            Crochet: {hook_text if hook_found else 'Aucun crochet sp√©cifique'}

            G√©n√®re un email de prospection personnalis√© conforme aux r√®gles.
            """

            email_content = self.writer_agent.process(writer_input, context)
            results['email'] = email_content
            results['processing_steps'].append("Email r√©dig√© par Vertex AI")

        st.success("‚úÖ Email g√©n√©r√© par Vertex AI Gemini!")

        return results

def setup_vertex_ai_environment():
    """Configuration Vertex AI"""
    st.set_page_config(
        page_title="Co-pilote Prospection - Vertex AI Edition",
        page_icon="ü§ñ",
        layout="wide"
    )

    # V√©rification Google Cloud
    project_id = os.getenv("GOOGLE_CLOUD_PROJECT")
    credentials_path = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")

    if not project_id or not credentials_path:
        st.error("""
        üîë **Configuration Google Cloud requise:**

        1. **Projet Google Cloud**: Cr√©ez un projet sur [Google Cloud Console](https://console.cloud.google.com)
        2. **Activez Vertex AI API**: Dans votre projet GCP
        3. **Service Account**: Cr√©ez une cl√© de service avec r√¥le Vertex AI User
        4. **Variables d'environnement**:
           ```
           GOOGLE_CLOUD_PROJECT=your-project-id
           GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json
           ```

        üìå **DuckDuckGo**: 100% GRATUIT, aucune configuration !
        """)
        st.stop()

def main():
    """Interface principale Vertex AI"""
    setup_vertex_ai_environment()

    st.title("ü§ñ Co-pilote Prospection IA - Vertex AI Edition")
    st.markdown("*Powered by Google Cloud Vertex AI + Recherche web gratuite*")

    # Status
    with st.container():
        col1, col2, col3 = st.columns(3)
        with col1:
            if os.getenv("GOOGLE_CLOUD_PROJECT"):
                st.success("üîó Vertex AI: Connect√©")
            else:
                st.error("‚ùå Vertex AI: Non configur√©")
        with col2:
            st.success("üîç DuckDuckGo: GRATUIT ‚ú®") 
        with col3:
            st.info("ü§ñ Agents: Pr√™ts")

    # Option de recherche
    search_option = st.radio(
        "Mode de recherche:",
        ("DuckDuckGo + Gemini (Recommand√©)", "Gemini uniquement"),
        help="DuckDuckGo est gratuit et plus pr√©cis. Gemini seul est plus rapide mais moins fiable."
    )

    # Interface principale
    st.header("üìã Nouveau Prospect")

    with st.form("prospect_form_vertex"):
        col1, col2 = st.columns([1, 2])

        with col1:
            contact_name = st.text_input("Nom du contact *", placeholder="Ex: Kevin Martin")
            company_name = st.text_input("Entreprise *", placeholder="Ex: Made In Tracker")

        with col2:
            company_description = st.text_area(
                "Description entreprise *",
                placeholder="Description compl√®te de l'entreprise (LinkedIn, site web)...",
                height=100
            )

        process_btn = st.form_submit_button("üöÄ Analyser avec Vertex AI", use_container_width=True)

    # Traitement
    if process_btn:
        if not all([contact_name, company_name, company_description]):
            st.error("‚ö†Ô∏è Tous les champs sont obligatoires")
            return

        # Choix du mode de recherche
        if search_option == "Gemini uniquement":
            st.info("ü§ñ Mode: Gemini recherche autonome")
        else:
            st.info("üîç Mode: DuckDuckGo + Analyse Gemini")

        prospect = ProspectInfo(contact_name, company_name, company_description)
        pipeline = VertexAIProspectingPipeline()

        with st.container():
            st.header("üîÑ Traitement Vertex AI")
            progress = st.progress(0)

            results = pipeline.process_prospect(prospect)
            progress.progress(100)

            # Affichage r√©sultats
            if results['email']:
                st.header("üìß Email Vertex AI")

                email_text = results['email']
                word_count = len(email_text.split())
                has_cta = "Seriez-vous disponible 15 minutes" in email_text

                col1, col2, col3, col4 = st.columns(4)
                col1.metric("Mots", word_count, "Max: 100")
                col2.metric("CTA", "‚úÖ" if has_cta else "‚ùå")
                col3.metric("Crochet", "‚úÖ" if results['hook_research'].hook_found else "‚ö†Ô∏è")
                col4.metric("Score", f"{results['qualification'].score}/10")

                # Email √©ditable
                final_email = st.text_area("Email final:", value=email_text, height=300)

                # Actions
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.download_button(
                        "üì• T√©l√©charger",
                        data=final_email,
                        file_name=f"email_{company_name.lower().replace(' ', '_')}.txt",
                        use_container_width=True
                    )
                with col2:
                    if st.button("üìã Copier email", use_container_width=True):
                        st.success("‚úÖ Email copi√©!")
                with col3:
                    if st.button("üîÑ R√©g√©n√©rer", use_container_width=True):
                        st.rerun()

                # Log de traitement
                with st.expander("üìù Journal Vertex AI"):
                    for step in results['processing_steps']:
                        st.write(f"‚Ä¢ {step}")

if __name__ == "__main__":
    main()
